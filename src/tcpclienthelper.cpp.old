// #include <ESP8266WiFi.h>
// #include <ESPAsyncTCP.h>
#include "FSWebServerLib.h"
#include "modbus.h"
#include "StreamString.h"
#include <ArduinoJson.h>
#include <Ticker.h>
#include "SyncClient.h"
#include "gahe1progmem.h"

// extern "C"
// {
// #include <osapi.h>
// #include <os_type.h>
// }

#define DEBUGPORT Serial

#define RELEASE

#ifndef RELEASE
#define DEBUGLOG(fmt, ...)                       \
    {                                            \
        static const char pfmt[] PROGMEM = fmt;  \
        DEBUGPORT.printf_P(pfmt, ##__VA_ARGS__); \
    }
#else
#define DEBUGLOG(...)
#endif

#define SERVER_HOST_NAME "192.168.10.251"

#define TCP_PORT 7050

// static os_timer_t intervalTimer;

static void replyToServer(void *arg)
{
    AsyncClient *client = reinterpret_cast<AsyncClient *>(arg);

    // send reply
    if (client->space() > 32 && client->canSend())
    {
        char message[32];
        sprintf(message, "this is from %s", WiFi.localIP().toString().c_str());
        client->add(message, strlen(message));
        client->send();
    }
}



void onConnect(void *arg, AsyncClient *client)
{
    DEBUGLOG("\r\n Client has been connected to %s on port %d \r\n", SERVER_HOST_NAME, TCP_PORT);
    replyToServer(client);
}

void onDisconnect(void *arg, AsyncClient *client)
{
    DEBUGLOG("\r\n TCP client disconnected from %s on port %d \r\n", SERVER_HOST_NAME, TCP_PORT);
    // replyToServer(client);
}

void onError(void *arg, AsyncClient *client, err_t error)
{
    DEBUGLOG("\r\n TCP client error, %s on port %d \r\n", SERVER_HOST_NAME, TCP_PORT);
    client->close(true);
    // replyToServer(client);
}

void onTimeout(void *arg, AsyncClient *client, uint32_t time)
{
    DEBUGLOG("\r\n TCP client timeout, %s on port %d \r\n", SERVER_HOST_NAME, TCP_PORT);
    client->close(true);
    // replyToServer(client);
}

Ticker tickerConnectToThingspeak;

bool triggered = false;

void trigger()
{
    triggered = true;
}

bool connected = false;
bool failed = false;

char bufResponse[64];

void SyncClientThingspeak()
{
    uint32_t freeheap = ESP.getFreeHeap();
    char bufHeap[10];
    dtostrf(freeheap, 0, 0, bufHeap);

    SyncClient client;

    if (!client.connect(SERVER_HOST_NAME, TCP_PORT))
    {
        failed = true;
        return;
    }
    client.setTimeout(2);

    if (client.printf_P(pgm_thingspeak_template,
                        "POST",
                        "/update?",
                        bufAmpere,
                        bufWatt,
                        bufVoltage,
                        bufPstkwh,
                        bufVar,
                        bufApparentPower,
                        bufPowerFactor,
                        bufHeap,
                        ESPHTTPServer._config.hostname,
                        "api.thingspeak.com",
                        "DMFQ3BQPZV3U6RL1") > 0)
    {
        connected = true;

        while (client.connected() && client.available() == 0)
        {
            yield();
        }

        uint8_t i = 0;

        while (client.available())
        {
            // Serial.write(client.read());
            char c = (char)client.read();

            uint8_t maxLen = sizeof(bufResponse) / sizeof(bufResponse[0]) - 1;

            if (i < maxLen)
            {
                bufResponse[i] = c;
                bufResponse[i + 1] = '\0';
                i++;
                if (c == '\n')
                {
                    client.flush();
                    break;
                }
            }
        }

        if (client.connected())
        {
            client.stop();
        }
    }
    else
    {
        client.stop();
        // if (ws.count())
        //     ws.textAll("Send failed\r\n");

        failed = 2;

        // while (client.connected())
        //     delay(0);
    }

    if (wifiGotIpFlag)
        tickerConnectToThingspeak.once(15, trigger);
}

void Tcpclientsetup()
{

    // AsyncClient *client = new AsyncClient;
    // client->onData(&handleData, client);
    // client->onConnect(&onConnect, client);
    // client->onDisconnect(&onDisconnect, client);
    // client->onError(&onError, client);
    // client->onTimeout(&onTimeout, client);
    // client->connect(SERVER_HOST_NAME, TCP_PORT);

    // os_timer_disarm(&intervalTimer);
    // os_timer_setfn(&intervalTimer, &replyToServer, client);

    // tickerConnectToThingspeak.once(15, trigger);
}

void Tcpclientloop()
{
    static bool inetStatus = false;
    if (inetStatus != wifiGotIpFlag)
    {
        inetStatus = wifiGotIpFlag;
        if (wifiGotIpFlag)
            tickerConnectToThingspeak.once(15, trigger);
        else
            tickerConnectToThingspeak.detach();
    }

    if (triggered)
    {
        triggered = false;

        SyncClientThingspeak();

        //  if (ws.count())
        //     ws.textAll("Trigeered\n");
    }

    if (connected)
    {
        connected = false;

        if (ws.count())
        {
            const char *txt = bufResponse;
            ws.textAll(txt);
        }
    }

    if (failed)
    {
        if (failed == 1)
        {
            if (ws.count())
                ws.textAll("Send failed\r\n");
        }
        else if (failed == 2)
        {
            if (ws.count())
                ws.textAll("Send failed 2\r\n");
        }

        failed = false;
    }
}